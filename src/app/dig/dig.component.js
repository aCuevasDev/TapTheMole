"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var DigComponent = /** @class */ (function () {
    function DigComponent() {
        this.topo = "res://topo";
        this.forat = "res://forat";
        //estats=[this.forat,this.forat,this.forat,this.forat,this.forat,this.forat,this.forat,this.forat,this.forat];
        this.toposInit = 6;
        this.toposMax = 12;
        this.estats = Array(this.toposInit).fill(this.forat);
        this.punts = 0;
        this.lastPunts = 0;
        this.temps = 30;
        this.buffertemps = 0;
        this.vides = 3;
        this.playable = true;
        this.gameOver = "";
        this.intervalTime = 500;
    }
    DigComponent.prototype.ngOnInit = function () {
        this.iniciaInterval();
    };
    DigComponent.prototype.onClick = function (pos) {
        if (this.playable) {
            if (this.estats[pos] == this.topo) {
                this.punts += 10;
                if (this.punts > 200)
                    this.aceleraTopos();
                if (this.lastPunts + 100 <= this.punts) {
                    if (this.estats.length < this.toposMax)
                        this.estats.splice(this.estats.length, 0, this.forat, this.forat, this.forat);
                    console.log("size: " + this.estats.length);
                    this.lastPunts = this.punts;
                }
                this.estats[pos] = this.forat;
            }
            else {
                this.punts -= 20;
            }
        }
    };
    DigComponent.prototype.aceleraTopos = function () {
        // this.sacaTopos();
        this.intervalTime = 250;
        clearInterval(this.interval);
        this.iniciaInterval();
    };
    DigComponent.prototype.cambiaTopos = function (pos) {
        if (this.playable) {
            switch (this.estats[pos]) {
                case this.topo:
                    this.estats[pos] = this.forat;
                    this.vides -= 1;
                    if (this.vides == 0)
                        this.hasPerdido();
                    break;
                case this.forat:
                    this.estats[pos] = this.topo;
                    break;
            }
        }
    };
    DigComponent.prototype.sacaTopos = function () {
        var pos = Math.floor((Math.random() * this.estats.length));
        this.cambiaTopos(pos);
        this.buffertemps += this.intervalTime / 1000;
        if (this.buffertemps == 1 && this.temps > 0) {
            this.temps--;
            this.buffertemps = 0;
        }
        if (this.temps == 0) {
            this.hasPerdido();
        }
    };
    DigComponent.prototype.iniciaInterval = function () {
        var _this = this;
        this.interval = setInterval(function () {
            _this.sacaTopos();
        }, this.intervalTime);
    };
    DigComponent.prototype.reset = function () {
        clearInterval(this.interval);
        this.estats = Array(this.toposInit).fill(this.forat);
        this.intervalTime = 500;
        this.temps = 30;
        this.punts = 0;
        this.lastPunts = 0;
        this.buffertemps = 0;
        this.playable = true;
        this.vides = 3;
        this.gameOver = "";
        this.iniciaInterval();
        this.estats.fill(this.forat);
    };
    DigComponent.prototype.hasPerdido = function () {
        clearInterval(this.interval);
        this.playable = false;
        this.gameOver = "Game Over";
    };
    DigComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "dig",
            templateUrl: "dig.component.html",
            styleUrls: ["dig.component.css"]
        })
    ], DigComponent);
    return DigComponent;
}());
exports.DigComponent = DigComponent;
//# sourceMappingURL=data:application/json;base64,